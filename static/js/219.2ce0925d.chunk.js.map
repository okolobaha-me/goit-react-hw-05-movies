{"version":3,"file":"static/js/219.2ce0925d.chunk.js","mappings":"0PAEaA,EAASC,EAAAA,GAAAA,GAAH,8HCANC,EAAYD,EAAAA,GAAAA,GAAH,sBAETE,EAAaF,EAAAA,GAAAA,IAAH,yCAIVG,EAAOH,EAAAA,GAAAA,EAAH,yC,6BCDJI,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KASA,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAcL,EAAMM,IAAIC,MAAK,SAAAC,GACtBA,GACLL,EAAS,kCAAD,OAAmCK,SAE5C,CAACR,EAAMM,MAGR,UAACV,EAAD,WACKM,GACD,SAAC,EAAD,CAAYO,IAAKP,KAEjB,SAAC,cAAD,CACEQ,MAAO,CACLC,KAAM,QACNC,MAAO,CAAEC,cAAe,SAAUC,OAAQ,UAH9C,UAME,SAAC,MAAD,CAAkBC,MAAO,SAG7B,SAACjB,EAAD,UAAOE,EAAMgB,QACb,SAAClB,EAAD,UAAOE,EAAMiB,gBCVnB,EAhBa,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBjB,EAAAA,EAAAA,UAAS,IAAjC,eAAOmB,EAAP,KAAaC,EAAb,KAMA,OAJAjB,EAAAA,EAAAA,YAAU,YACRkB,EAAAA,EAAAA,IAAgBJ,GAASX,MAAK,SAAAC,GAAC,OAAIa,EAAQb,QAC1C,CAACU,KAGF,SAACxB,EAAD,YACK0B,EAAKG,QACNH,EAAKI,MAAM,EAAG,IAAIC,KAAI,SAAAzB,GAAK,OAAI,SAACD,EAAD,CAAsBC,MAAOA,GAAjBA,EAAMM,W,kOCfzDoB,IAAAA,SAAAA,OAAwB,CAAEC,QAAS,oCAEnC,IAAMC,EAAsBF,IAAAA,OAAa,CACvCG,OAAQ,MACRC,QAAS,oDAGLC,EAAsBL,IAAAA,OAAa,CACvCG,OAAQ,MACRC,QAAS,4CACTE,cAAe,SAGXC,EAAyBP,IAAAA,OAAa,CAC1CG,OAAQ,MACRC,QAAS,uCAGLI,EAAuBR,IAAAA,OAAa,CACxCG,OAAQ,MACRC,QAAS,wCAGEK,EAAW,WACtB,OAAOP,IAAsBrB,MAAK,SAAAC,GAAC,OAAIA,EAAE4B,KAAKC,YAGnCC,EAAe,SAAAC,GAC1B,OAAOR,EAAoB,CACzBS,OAAQ,CACND,MAAAA,KAEDhC,MAAK,SAAAC,GAAC,OAAIA,EAAE4B,KAAKC,YAGTI,EAAkB,SAAAnC,GAC7B,IACE,OAAO2B,EAAuBS,IAAvB,WAA+BpC,IAAMC,MAAK,SAAAC,GAAC,OAAIA,EAAE4B,QACxD,MAAOO,GACP,MAAMC,QAIGtB,EAAkB,SAAAhB,GAC7B,OAAO2B,EAAuBS,IAAvB,WAA+BpC,EAA/B,aAA6CC,MAAK,SAAAC,GAAC,OAAIA,EAAE4B,KAAKhB,SAG1DyB,EAAkB,SAAAvC,GAC7B,OAAO2B,EAAuBS,IAAvB,WAA+BpC,EAA/B,aAA6CC,MAAK,SAAAC,GAAC,OAAIA,EAAE4B,KAAKC,YAG1DhC,EAAa,mCAAG,WAAMC,GAAN,0FAEX4B,EAAqBQ,IAArB,WAA6BpC,EAA7B,YAFW,uCAEgC8B,KAAKU,SAAS,GACpEC,WAHsB,0DAMlB,GANkB,wDAAH","sources":["Pages/Cast/Cast.styled.jsx","components/Actor/Actor.styled.jsx","components/Actor/Actor.jsx","Pages/Cast/Cast.jsx","js/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Actors = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n`;\n\nexport class ActorImage {}\n","import styled from 'styled-components';\n\nexport const ActorItem = styled.li``;\n\nexport const ActorImage = styled.img`\n  width: 100px;\n`;\n\nexport const Text = styled.p`\n  width: 150px;\n`;\n","import { useEffect, useState } from 'react';\nimport { getActorPhoto } from '../../js/API';\nimport { ActorImage, ActorItem, Text } from './Actor.styled';\nimport PropTypes from 'prop-types';\nimport { BsFillPersonFill } from 'react-icons/bs';\nimport { IconContext } from 'react-icons';\n\nexport const Actor = ({ actor }) => {\n  const [image, setImage] = useState(``);\n\n  useEffect(() => {\n    getActorPhoto(actor.id).then(r => {\n      if (!r) return;\n      setImage(`https://image.tmdb.org/t/p/w500${r}`);\n    });\n  }, [actor.id]);\n\n  return (\n    <ActorItem>\n      {!!image ? (\n        <ActorImage src={image} />\n      ) : (\n        <IconContext.Provider\n          value={{\n            size: '100px',\n            style: { verticalAlign: 'middle', height: '150px' },\n          }}\n        >\n          <BsFillPersonFill width={100} />\n        </IconContext.Provider>\n      )}\n      <Text>{actor.name}</Text>\n      <Text>{actor.character}</Text>\n    </ActorItem>\n  );\n};\n\nActor.propTypes = {\n  actor: PropTypes.object.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { getMovieCredits } from '../../js/API';\nimport { Actors } from './Cast.styled';\nimport { Actor } from '../../components/Actor/Actor';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCredits(movieId).then(r => setCast(r));\n  }, [movieId]);\n\n  return (\n    <Actors>\n      {!!cast.length &&\n        cast.slice(0, 12).map(actor => <Actor key={actor.id} actor={actor} />)}\n    </Actors>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\naxios.defaults.params = { api_key: '079f315d1c0a92bbce195275b13a313a' };\n\nconst getTrendFilmRequest = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3/trending/movie/day',\n});\n\nconst searchMoviesRequest = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3/search/movie',\n  include_adult: 'true',\n});\n\nconst getMovieDetailsRequest = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3/movie',\n});\n\nconst getActorPhotoRequest = axios.create({\n  method: 'get',\n  baseURL: 'https://api.themoviedb.org/3/person',\n});\n\nexport const getTrend = () => {\n  return getTrendFilmRequest().then(r => r.data.results);\n};\n\nexport const searchMovies = query => {\n  return searchMoviesRequest({\n    params: {\n      query,\n    },\n  }).then(r => r.data.results);\n};\n\nexport const getMovieDetails = id => {\n  try {\n    return getMovieDetailsRequest.get(`/${id}`).then(r => r.data);\n  } catch (e) {\n    throw Error;\n  }\n};\n\nexport const getMovieCredits = id => {\n  return getMovieDetailsRequest.get(`/${id}/credits`).then(r => r.data.cast);\n};\n\nexport const getMovieReviews = id => {\n  return getMovieDetailsRequest.get(`/${id}/reviews`).then(r => r.data.results);\n};\n\nexport const getActorPhoto = async id => {\n  try {\n    return (await getActorPhotoRequest.get(`/${id}/images`)).data.profiles[0]\n      .file_path;\n  } catch (e) {\n    // console.log(e);\n    return false;\n  }\n};\n"],"names":["Actors","styled","ActorItem","ActorImage","Text","Actor","actor","useState","image","setImage","useEffect","getActorPhoto","id","then","r","src","value","size","style","verticalAlign","height","width","name","character","movieId","useParams","cast","setCast","getMovieCredits","length","slice","map","axios","api_key","getTrendFilmRequest","method","baseURL","searchMoviesRequest","include_adult","getMovieDetailsRequest","getActorPhotoRequest","getTrend","data","results","searchMovies","query","params","getMovieDetails","get","e","Error","getMovieReviews","profiles","file_path"],"sourceRoot":""}